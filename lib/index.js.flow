/* @flow */
import type {Context as KoaContext} from 'koa';

type SSRContext = {
  element: any,
  template: {
    htmlAttrs: Object,
    title: string,
    head: Array<string>,
    body: Array<string>,
  },
} & KoaContext;

export type Context = SSRContext | KoaContext;
export type PluginType<Dependencies, Plugin> = Dependencies => Plugin;
export type Middleware = (
  ctx: Context,
  next: () => Promise<void>
) => Promise<void>;

declare class App {
  // TODO: More specific types
  registered: Map<any, any>;
  plugins: Array<any>;
  renderer: any;
  register<A, B>(Plugin: PluginType<A, B>, type: B): void;
  middleware<Deps>(middleware: (Deps) => Middleware, deps: Deps): void;
}
